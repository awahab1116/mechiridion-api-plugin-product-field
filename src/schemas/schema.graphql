extend type Product {
  countryOfOrigin: String
  website: String
  parentCompany: String
  establishedYear: String
  # Identification: [Identification]
  # EngineInformation: [String]
  # Dimensions: [String]
  # FuelInformation: [String]
  # FuelDeliverySystem: String
  # EngineTechnology: String
  # Images: String
  # SendGiff: String
}
extend type ProductVariant {
  countryOfOrigin: String
  website: String
  parentCompany: String
  establishedYear: String
}

extend type CatalogProduct {
  countryOfOrigin: String
  website: String
  parentCompany: String
  establishedYear: String
}

extend input ProductVariantInput {
  countryOfOrigin: String
  website: String
  parentCompany: String
  establishedYear: String
}

extend input ProductInput {
  countryOfOrigin: String
  website: String
  parentCompany: String
  establishedYear: String
}

type VehicleModel implements Node {
  _id: ID!
  title: String
  productId: String
  releaseYear: String
  bodyType: String
  engineType: String
  transmissionType: String
  fuelType: String
  driveType: String
  seatingCapacity: Int
  priceRange: Float
  description: String
  isDeleted: Boolean
  isVisible: Boolean
}
type vehicleModelConnection {
  "The list of nodes that match the query, wrapped in an edge to provide a cursor string for each"
  edges: [VehicleModelEdge]
  """
  You can request the `nodes` directly to avoid the extra wrapping that `NodeEdge` has,
  if you know you will not need to paginate the results.
  """
  nodes: [VehicleModel]
  "Information to help a client request the next or previous page"
  pageInfo: PageInfo!
  "The total number of nodes that match your query"
  totalCount: Int!
}
type vehicleVariantConnection {
  "The list of nodes that match the query, wrapped in an edge to provide a cursor string for each"
  edges: [VehicleVariantEdge]
  """
  You can request the `nodes` directly to avoid the extra wrapping that `NodeEdge` has,
  if you know you will not need to paginate the results.
  """
  nodes: [VehicleVariant]
  "Information to help a client request the next or previous page"
  pageInfo: PageInfo!
  "The total number of nodes that match your query"
  totalCount: Int!
}
type VehicleVariantEdge implements NodeEdge {
  "The cursor that represents this node in the paginated results"
  cursor: ConnectionCursor!
  "The Transaction"
  node: VehicleVariant
}
type VehicleModelEdge implements NodeEdge {
  "The cursor that represents this node in the paginated results"
  cursor: ConnectionCursor!
  "The Transaction"
  node: VehicleModel
}
type VehicleModelPayload {
  status: Boolean
  message: String
  VehicleModelData: JSON
}
input vehicleModelInput {
  _id: ID
  title: String
  productId: String
  releaseYear: String
  bodyType: String
  engineType: String
  transmissionType: String
  fuelType: String
  driveType: String
  seatingCapacity: Int
  priceRange: Float
  description: String
  isDeleted: Boolean
  isVisible: Boolean
}
type VehicleVariant implements Node {
  _id: ID!
  vehicleModelId: ID
  title: String
  engineVariant: EngineVariantInformation
  fuelVariant: FuelVariantInformation
  description: String
  dimensionsVariant: dimensionsVariantInformation
  antiBrakeSystem: String
  isDeleted: Boolean
  isVisible: Boolean
}
input VehicleVariantInput {
  vehicleModelId: ID
  title: String
  engineVariant: EngineVariantInput
  fuelVariant: FuelVariantInput
  description: String
  dimensionsVariant: dimensionsVariantInput
  antiBrakeSystem: String
  isDeleted: Boolean
  isVisible: Boolean
}
type dimensionsVariantInformation {
  height: String
  length: String
  width: String
  weight: String
}
input dimensionsVariantInput {
  height: String
  length: String
  width: String
  weight: String
}
input EngineVariantInput {
  driveline: String
  engineType: String
  hybrid: Boolean
  numberOfForwardGears: String
  transmission: String
  horsePower: String
  torque: String
}
type EngineVariantInformation {
  driveline: String
  engineType: String
  hybrid: Boolean
  numberOfForwardGears: String
  transmission: String
  horsePower: String
  torque: String
}
type FuelVariantInformation {
  cityMpg: String
  fuelType: String
  highwayMpg: String
}
input FuelVariantInput {
  cityMpg: String
  fuelType: String
  highwayMpg: String
}
input updateVehicleModelInput {
  "Product input"
  product: updateVehicleInput!

  "ID of product to update"
  productId: ID!

  "ID of shop that owns the product to update"
  shopId: ID!
}
input updateVehicleInput {
  title: String
  productId: String
  releaseYear: String
  bodyType: String
  engineType: String
  transmissionType: String
  fuelType: String
  driveType: String
  seatingCapacity: Int
  priceRange: Float
  description: String
  isDeleted: Boolean
  isVisible: Boolean
}
input updateVehicleVariantInput {
  "Product input"
  product: VehicleVariantInput!

  "ID of product to update"
  productId: ID!

  "ID of shop that owns the product to update"
  shopId: ID!
}
type VehicleVariantPayload {
  status: Boolean
  message: String
  VehicleVariantData: JSON
}

extend type Mutation {
  createVehicleModel(input: vehicleModelInput, shopId: String): VehicleModel
  createVehicleVariant(input: VehicleVariantInput): VehicleVariant
  updateVehicleModel(input: updateVehicleModelInput): VehicleModelPayload
  updateVehicleVariant(input: updateVehicleVariantInput): VehicleVariantPayload
  deleteVehicleVariant(id: ID!): VehicleVariantPayload
  deleteVehicleModel(id: ID!): VehicleModelPayload
}
extend type Query {
  getAllVehicleModel(
    # searchQuery: String
    "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
    after: ConnectionCursor
    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor
    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt
    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt
    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int
    "Return results sorted in this order"
    sortOrder: SortOrder = asc
    "By default, groups are sorted by when they were created, oldest first. Set this to sort by one of the other allowed fields"
    sortBy: AccountSortByField = timeSent
  ): vehicleModelConnection!
  getVehicleModelById(id: ID!): VehicleModel
  getAllVehicleVariant( # searchQuery: String
    "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
    after: ConnectionCursor
    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor
    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt
    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt
    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int
    "Return results sorted in this order"
    sortOrder: SortOrder = asc
    "By default, groups are sorted by when they were created, oldest first. Set this to sort by one of the other allowed fields"
    sortBy: AccountSortByField = timeSent
  ): vehicleVariantConnection!
  getVehicleVariantById(id: ID!): VehicleVariant
  getAllVehicleVariantsByModel(
    vehicleModelId: ID!
    "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
    after: ConnectionCursor
    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor
    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt
    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt
    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int
    "Return results sorted in this order"
    sortOrder: SortOrder = asc
    "By default, groups are sorted by when they were created, oldest first. Set this to sort by one of the other allowed fields"
    sortBy: AccountSortByField = timeSent
  ): vehicleVariantConnection
}
